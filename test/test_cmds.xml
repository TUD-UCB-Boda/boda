<root>
  <li test_name="test_oct_1" needs="octave" cli_str="boda test_oct"/>
  <li test_name="vst_1">
    <command mode="vst" 
	     u64="23" dpf="3.4" pdpf="3.2" >
      <vdpf li_0="1.5" li_1="2.3"/>
      <vu64 li_0="0" li_1="2" li_2="0"/> 
    </command>
  </li>
  <li test_name="vst_2" cli_str="boda vst --dpf=4.3 --nda=(tn=float,v=5.4) "/>
  <li test_name="vst_3" cli_str="boda vst --dpf=4.3 --nda=(tn=uint32_t,dims=(v=3),v=5:12:19) "/>
  <li test_name="load_pil_1"> <command mode="load_pil" pil_fn="%(boda_test_dir)/pascal/bicycle_10.txt" /> </li>
  <li test_name="load_pil_2" err="error: invalid type string in image list file '%(boda_test_dir)/pascal/bicycle_10.inv_1.txt': saw '', expected '1', '-1', or '0'." >
    <command mode="load_pil" pil_fn="%(boda_test_dir)/pascal/bicycle_10.inv_1.txt"/>
  </li>
  <li test_name="load_pil_3" err="error: invalid line in image list file '%(boda_test_dir)/pascal/bicycle_10.inv_2.txt': num of parts != 2 after space splitting. line was:&#10;000006" >
    <command mode="load_pil" pil_fn="%(boda_test_dir)/pascal/bicycle_10.inv_2.txt"/>
  </li>
  <li test_name="load_pil_4" err="error: tried to load annotations multiple times for id '000001'" >
    <command mode="load_pil" pil_fn="%(boda_test_dir)/pascal/bicycle_10.inv_3.txt"/>
  </li>
  <li test_name="score_1" slow="1" >
    <command mode="score" 
	     pil_fn="%(pascal_data_dir)/ImageSets/Main/bicycle_test.txt" 
	     res_fn="%(ffld_dir)/build/ffld_VOC2007_bicycle_test_out.txt" 
	     pascal_classes_fn="%(boda_test_dir)/pascal/head_1/pascal_classes.txt"
	     /></li>
  <li test_name="score_2" err="error: tried to get ix for unloaded img_id '006237'">
    <command mode="score" 
	     pil_fn="%(boda_test_dir)/pascal/bicycle_10.txt"
	     res_fn="%(boda_test_dir)/pascal/bicycle_out_10.txt"
	     pascal_classes_fn="%(boda_test_dir)/pascal/head_1/pascal_classes.txt"
	     /></li>
  <li test_name="score_3">
    <command mode="score" 
	     pil_fn="%(boda_test_dir)/pascal/bicycle_100.txt"
	     res_fn="%(boda_test_dir)/pascal/bicycle_out_100.txt"
	     prc_png_fn=""
	     pascal_classes_fn="%(boda_test_dir)/pascal/head_1/pascal_classes.txt"
	     /></li>
  <li test_name="run_dfc_1" slow="1" needs="octave" cli_str="boda run_dfc --pascal_classes_fn='%(boda_test_dir)/pascal/head_1/pascal_classes.txt' --pil_fn='%(boda_test_dir)/pascal/head_1/%%s.txt'"/> 
  <li test_name="run_dfc_10" slow="1" needs="octave" cli_str="boda run_dfc --pascal_classes_fn='%(boda_test_dir)/pascal/head_10/pascal_classes.txt' --pil_fn='%(boda_test_dir)/pascal/head_10/%%s.txt'"/> 
  <li test_name="run_dfc_100" slow="1" needs="octave" cli_str="boda run_dfc --pascal_classes_fn='%(boda_test_dir)/pascal/head_100/pascal_classes.txt' --pil_fn='%(boda_test_dir)/pascal/head_100/%%s.txt'"/> 
  <li test_name="oct_featpyra_1" needs="octave" cli_str="boda oct_featpyra --image_list_fn='%(boda_test_dir)/plasma_imgs.txt'"/>
  <li test_name="oct_featpyra_2" needs="octave" slow="1" cli_str="boda oct_featpyra --image_list_fn='%(boda_test_dir)/pascal_imgs_10.txt'"/>
  <li test_name="oct_resize_1" needs="octave" cli_str="boda oct_resize --image_list_fn='%(boda_test_dir)/plasma_imgs.txt'"/>
  <li test_name="oct_resize_2" needs="octave" slow="1" cli_str="boda oct_resize --image_list_fn='%(boda_test_dir)/pascal_imgs_10.txt'"/>
  <li test_name="blf_pack_1" 
      err="error: box (*i)=50:50 cannot be placed into empty bin of shape (0:0)(40:40) (i.e. box to place > bin size)" >
  <command mode="blf_pack" to_pack_fn="%(boda_test_dir)/blf_in_1.txt" bin_sz="40"/>
  </li>
  <li test_name="blf_pack_2"> <command mode="blf_pack" to_pack_fn="%(boda_test_dir)/blf_in_1.txt" bin_sz="50"/></li>
  <li test_name="blf_pack_3"> <command mode="blf_pack" to_pack_fn="%(boda_test_dir)/blf_in_1.txt" bin_sz="100"/></li>
  <li test_name="blf_pack_4"> <command mode="blf_pack" to_pack_fn="%(boda_test_dir)/blf_in_1.txt" bin_sz="500"/></li>
  <li test_name="conv_ana_1"> <command mode="conv_ana" out_sz="6" in_sz="227" ignore_padding_for_support="1"  ><convs>
    <li tag="conv1" ><str_vals type="Convolution"/><nda_vals>
      <kern_sz tn="none"><dims y="11" x="11"/></kern_sz><stride tn="none"><dims y="4" x="4"/></stride>
    </nda_vals></li>
    <li tag="pool1" ><str_vals type="Pooling"/><nda_vals>
      <kern_sz tn="none"><dims y="3" x="3"/></kern_sz> <stride tn="none"><dims y="2" x="2"/></stride>
    </nda_vals></li>
    <li tag="conv2" ><str_vals type="Convolution"/><nda_vals>
      <kern_sz tn="none"><dims y="5" x="5"/></kern_sz> <in_pad tn="none"><dims y="2" x="2"/></in_pad>
    </nda_vals></li>
    <li tag="pool2" ><str_vals type="Pooling"/><nda_vals>
      <kern_sz tn="none"><dims y="3" x="3"/></kern_sz> <stride tn="none"><dims y="2" x="2"/></stride>
    </nda_vals></li>
    <li tag="conv3" ><str_vals type="Convolution"/><nda_vals>
      <kern_sz tn="none"><dims y="3" x="3"/></kern_sz> <in_pad tn="none"><dims y="1" x="1"/></in_pad>
    </nda_vals></li>
    <li tag="conv4" ><str_vals type="Convolution"/><nda_vals>
      <kern_sz tn="none"><dims y="3" x="3"/></kern_sz> <in_pad tn="none"><dims y="1" x="1"/></in_pad>
    </nda_vals></li>
    <li tag="conv5" ><str_vals type="Convolution"/><nda_vals>
      <kern_sz tn="none"><dims y="3" x="3"/></kern_sz> <in_pad tn="none"><dims y="1" x="1"/></in_pad>
    </nda_vals></li>
    <li tag="pool5" ><str_vals type="Pooling"/> <nda_vals>
      <kern_sz tn="none"><dims y="3" x="3"/></kern_sz> <stride tn="none"><dims y="2" x="2"/></stride>
    </nda_vals></li>

  </convs></command></li>
  <li test_name="conv_ana_xml"> <command mode="conv_ana" out_sz="6" in_sz="227" ignore_padding_for_support="1" XML_INC_convs="conv_pyra_pipe.xml:convs"/></li>
  <li test_name="conv_ana_xml_2" cli_str="boda conv_ana --out-sz=12 --in-sz=227 --ignore-padding-for-support=1 --XML_INC_convs=../../test/conv_pyra_pipe.xml:convs"/>

  <li test_name="test_rtc_nvrtc" needs="nvrtc" cli_str="boda rtc_test --rtc='(be=nvrtc)' --prog-fn='%(boda_test_dir)/nvrtc_test_dot.cu"/>
  <li test_name="test_rtc_ocl" cli_str="boda rtc_test --rtc='(be=ocl)' --prog-fn='%(boda_test_dir)/ocl_test_dot.cl'"/>
  <li test_name="test_rtc_cucl_nvrtc" needs="nvrtc" cli_str="boda rtc_test --rtc='(be=nvrtc)' "/>
  <li test_name="test_rtc_cucl_ocl" cli_str="boda rtc_test --rtc='(be=ocl)' "/>
  <li test_name="test_rtc_cucl_ocl_struct" cli_str="boda rtc_test --rtc='(be=ocl)' --func-name=my_dot_struct "/>
  <li test_name="test_rtc_cucl_ipc" cli_str="boda rtc_test --rtc='(be=ipc)' "/>
  <li test_name="test_rtc_cucl_ipc_tcp" cli_str="boda rtc_test --rtc='(be=ipc,boda_parent_addr=tcp:127.0.0.1:12791)' "/>
  <li test_name="test_dense_boda_rtc_1" cli_str="boda test_dense --model-name=nin_imagenet_nopad --wins_per_image=10000 --in_dims='(img=1)' --conv_fwd='(mode=rtc)' --run_cnet='()' --run_cnet_dense='()'"/>
  <li test_name="test_dense_boda_rtc_2" cli_str="boda test_dense --model-name=nin_imagenet --wins_per_image=10000 --in_dims='(img=1,y=227,x=227)' --out_node_name=cccp8 --conv_fwd='(mode=rtc)' --run_cnet='()' --run_cnet_dense='()'"/>
  <li test_name="test_dense_1" cli_str="boda test_dense --model-name=nin_imagenet_nopad --wins_per_image=10000"/>
  <li test_name="test_dense_2" cli_str="boda test_dense --model-name=nin_imagenet --wins_per_image=10000 --run_cnet='(in_dims=(img=1,y=227,x=227),out_node_name=cccp8)'"/>
  <li test_name="test_upsamp_1" cli_str="boda test_upsamp --model-name=nin_imagenet_nopad --wins_per_image=3"/>
  <li test_name="test_quantize_1" cli_str="boda test_compute_multi --model-name=nin_imagenet --wins-per-image=1 --imgs='(pil_fn=%(boda_test_dir)/pascal/head_1/%%s.txt)' --run-cnet='(in_dims=(img=1,y=227,x=227),out_node_name=conv1)' --cfn='(_=rtc)' --cf='(_=(mode=rtc,quantize=(_=(name=conv1,max_val=1024,keep_bits=9))))' --kg-digests-fn='%(boda_test_dir)/good_tr/test_quantize_1/digest-rtc.boda'" />
  <li test_name="test_quantize_2" cli_str="boda test_compute_multi --model-name=nin_imagenet --wins-per-image=1 --imgs='(pil_fn=%(boda_test_dir)/pascal/head_1/%%s.txt)' --run-cnet='(in_dims=(img=1,y=227,x=227),out_node_name=conv1)' --cfn='(_=rtc-nq,_=rtc)' --cf='(_=(mode=rtc),_=(mode=rtc,quantize=(_=(name=conv1,max_val=1024,keep_bits=9))))' --diff-show-mrd-only=1" />
  <li test_name="test_stats_1" cli_str="boda test_compute_multi --model-name=nin_imagenet --wins-per-image=1 --imgs='(pil_fn=%(boda_test_dir)/pascal/head_1/%%s.txt)' --run-cnet='(in_dims=(img=1,y=227,x=227),out_node_name=conv1)' --cfn=(_=rtc) --cf='(_=(mode=rtc,enable_stats=1))' --max-err=10" />

  <li test_name="test_autotune_1" cli_str="boda run_cnet --model-name=nin_imagenet --in_dims='(img=1)' --conv_fwd='(mode=rtc,write_op_sigs=1)' --autotune=0" />
  <li test_name="test_autotune_2" cli_str="boda run_cnet --model-name=nin_imagenet --in_dims='(img=1)' --conv_fwd='(mode=rtc,write_op_sigs=1)' --autotune=1" />

  <li test_name="test_upsamp_1_nvrtc" cli_str="boda test_upsamp --model-name nin_imagenet_nopad --wins-per-image=3 --run-cnet='(in_dims=(img=1,y=516,x=516),enable_upsamp_net=1,out_node_name=cccp8,conv_fwd=(mode=rtc),conv_fwd_upsamp=(mode=rtc,op_tune=(tconv=1)))'"/>

<li test_name="test_cnn_op_info_1" cli_str="boda cnn_op_info --rtc='(be=ocl)' --gen-data='(str_vals=(type=gen_data),nda_vals=(vi=(tn=float,v=0.0),mode=(tn=uint32_t,v=600)))' --rtc-comp='(be=nvrtc)'  --max-err=10 --cnn-func-sigs-fn='%(boda_test_dir)/sgemm-ops-debug.txt' --out-fn='%(boda_output_dir)/cnn_op_info.txt'" />
<li test_name="test_cnn_op_info_2" cli_str="boda cnn_op_info --rtc='(be=ocl)' --gen-data='(str_vals=(type=gen_data),nda_vals=(vi=(tn=float,v=0.0),mode=(tn=uint32_t,v=600)))' --rtc-comp='(be=nvrtc)'  --max-err=10 --op-tune='(MNt=4:4,MNb=16:16,Kb=4,use_local_mem=0)' --cnn-func-sigs-fn='%(boda_test_dir)/sgemm-ops-debug.txt' --out-fn='%(boda_output_dir)/cnn_op_info.txt'" />
<li test_name="test_cnn_op_info_3" cli_str="boda cnn_op_info --rtc='(be=ocl)' --gen-data='(str_vals=(type=gen_data),nda_vals=(vi=(tn=float,v=0.0),mode=(tn=uint32_t,v=600)))' --rtc-comp='(be=nvrtc)'  --max-err=10 --op-tune='(MNt=4:4,MNb=16:16,Kb=4,use_local_mem=2,vw=4)' --cnn-func-sigs-fn='%(boda_test_dir)/sgemm-ops-debug.txt' --out-fn='%(boda_output_dir)/cnn_op_info.txt'" />
<li test_name="test_cnn_op_info_4" cli_str="boda cnn_op_info --rtc='(be=ocl)' --gen-data='(str_vals=(type=gen_data),nda_vals=(vi=(tn=float,v=0.0),mode=(tn=uint32_t,v=5)))' --rtc-comp='(be=nvrtc)'  --max-err=10 --op-tune='(MNt=4:4,MNb=16:16,Kb=4,use_local_mem=3,vw=4)' --cnn-func-sigs-fn='%(boda_test_dir)/sgemm-ops-debug.txt' --out-fn='%(boda_output_dir)/cnn_op_info.txt'" />

<li test_name="test_cnn_op_info_conv_cudnn_1" cli_str="boda cnn_op_info --rtc='(be=ocl)' --gen-data='(str_vals=(type=gen_data),nda_vals=(vi=(tn=float,v=0.0),mode=(tn=uint32_t,v=5)))' --rtc-comp='(be=nvrtc)' --cnn-func-sigs-fn='%(boda_test_dir)/conv-ops-debug.txt' --out-fn='%(boda_output_dir)/cnn_op_info.txt'"/>

<li ignore_missing_outputs="1" test_name="ops-prof-conv-3x3-cudnn-boda" cli_str="boda ops-prof --out-fn='%(boda_output_dir)/cnn_op_info.txt' --kg-tune-tag=ocl-opt --func-mrd-toler='(cudnn_conv=4e-4)' --wisdom-out-fn='%(boda_output_dir)/wisdom.wis' --ops-fn='%(boda_test_dir)/ops/conv/conv-ops-kern-3x3-batch-1-5-20-nin-alex-gn.txt' --gen-data='(str_vals=(type=gen_data),nda_vals=(vi=(tn=float,v=0.0),mode=(tn=uint32_t,v=5)))' --wisdom-in-fn='%(boda_test_dir)/good_tr/ops-prof-conv-3x3-cudnn-boda/wisdom.wis' --op-tunes='(ocl-opt=(use_be=ocl,k1conv=1,tconv=1),culibs=(use_be=nvrtc,use_culibs=1))'" />


<!-- note: test cases from velodyne (public) documentation -->
<li test_name="velo-crc-1" cli_str="boda test-velo-crc --hex-input=0607 --hex-crc=9411"/>
<li test_name="velo-crc-2" cli_str="boda test-velo-crc --hex-input=f10bf02478 --hex-crc=6328"/>
<li test_name="velo-crc-3" cli_str="boda test-velo-crc --hex-input=10173b7b02ff000417175a8491c8 --hex-crc=ca6c"/>
<li test_name="velo-crc-4" cli_str="boda test-velo-crc --hex-input=fe7bfd27050e0553053600C5001936b0000a00ffff51fd4404f60550054200C5ffe62328000f00ff018f0006049b04f404b700Ce00192ee0001414ff --hex-crc=a542"/>

</root>
